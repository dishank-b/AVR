
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000117  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d1  00000000  00000000  0000029b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000114  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000175  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000619  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>


int main(void)
{	uint8_t result;
    DDRB |= (1<<DDB3);
  6c:	bb 9a       	sbi	0x17, 3	; 23
	DDRA = 0b00000000;
  6e:	1a ba       	out	0x1a, r1	; 26
	ADMUX |= (1<<ADLAR) | (1<<REFS0);
  70:	87 b1       	in	r24, 0x07	; 7
  72:	80 66       	ori	r24, 0x60	; 96
  74:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
  76:	86 b1       	in	r24, 0x06	; 6
  78:	87 68       	ori	r24, 0x87	; 135
  7a:	86 b9       	out	0x06, r24	; 6
	
    while (1) 
    {
		ADCSRA |= (1<<ADSC);
  7c:	36 9a       	sbi	0x06, 6	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	2f e7       	ldi	r18, 0x7F	; 127
  80:	89 ea       	ldi	r24, 0xA9	; 169
  82:	93 e0       	ldi	r25, 0x03	; 3
  84:	21 50       	subi	r18, 0x01	; 1
  86:	80 40       	sbci	r24, 0x00	; 0
  88:	90 40       	sbci	r25, 0x00	; 0
  8a:	e1 f7       	brne	.-8      	; 0x84 <main+0x18>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <main+0x22>
  8e:	00 00       	nop
		_delay_ms(100);
		result = ADCH;
  90:	85 b1       	in	r24, 0x05	; 5
		
		if (result>128)
  92:	81 38       	cpi	r24, 0x81	; 129
  94:	10 f0       	brcs	.+4      	; 0x9a <main+0x2e>
		{
			PORTB|=(1<<PB3);
  96:	c3 9a       	sbi	0x18, 3	; 24
  98:	f1 cf       	rjmp	.-30     	; 0x7c <main+0x10>
		} 
		else{
			PORTB = 0b00000000;
  9a:	18 ba       	out	0x18, r1	; 24
  9c:	ef cf       	rjmp	.-34     	; 0x7c <main+0x10>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
